using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace LightMock.Generator
{
    sealed class MockDelegateProcessor : ClassProcessor
    {
        private readonly string fullName;
        private readonly string @namespace;
        private readonly string typeArgumentsWithBrackets;
        private readonly string whereClause;
        private readonly string commaArguments;
        private readonly string returnType;
        private readonly string @return;

        public MockDelegateProcessor(INamedTypeSymbol typeSymbol) : base(typeSymbol)
        {
            this.fullName = typeSymbol.ToDisplayString(SymbolDisplayFormats.Namespace);
            this.@namespace = typeSymbol.ContainingNamespace.ToDisplayString(SymbolDisplayFormats.Namespace);

            var to = typeSymbol.OriginalDefinition;
            var withTypeParams = to.ToDisplayString(SymbolDisplayFormats.WithTypeParams);
            var withWhereClause = to.ToDisplayString(SymbolDisplayFormats.WithWhereClause);
            var typeArguments = withTypeParams.Replace(to.ToDisplayString(SymbolDisplayFormats.Namespace), "");

            this.typeArgumentsWithBrackets = typeArguments.Length > 0 ? typeArguments : "";
            this.whereClause = withWhereClause.Replace(withTypeParams, "");
            this.commaArguments = string.Join(",",
                typeSymbol.OriginalDefinition.TypeArguments.Select(i => " "));
            var rt = to.DelegateInvokeMethod?.ReturnType;
            const string @void = "void";
            this.returnType = rt != null ? rt.ToDisplayString(SymbolDisplayFormats.Namespace) : @void;
            if (this.returnType == "System.Void")
                this.returnType = @void;
            this.@return = this.returnType == @void ? "" : "return ";
        }

        public override SourceText DoGenerate()
        {

            var code = $@"// <auto-generated />
using LightMock;
using LightMock.Generator;
using System;

namespace {@namespace}
{{
    sealed class {Prefix.MockClass}{typeSymbol.Name}{typeArgumentsWithBrackets} : IDelegateProvider
        {whereClause}
    {{
        private readonly IInvocationContext<{fullName}{typeArgumentsWithBrackets}> {VariableNames.Context};

        public {Prefix.MockClass}{typeSymbol.Name}(IInvocationContext<{fullName}{typeArgumentsWithBrackets}> {VariableNames.Context})
        {{
            this.{VariableNames.Context} = {VariableNames.Context};
        }}

        public {returnType} Invoke({string.Join(", ", GetParametersWithTypeNames())})
        {{
            {@return}{VariableNames.Context}.Invoke(f => f.Invoke({string.Join(", ", GetParameters())}));
        }}

        public Delegate GetDelegate()
        {{
            {fullName}{typeArgumentsWithBrackets} result = Invoke;
            return result;
        }}
    }}
}}
";
            return SourceText.From(code, Encoding.UTF8);
        }

        IEnumerable<string> GetParametersWithTypeNames()
        {
            var dim = typeSymbol.OriginalDefinition.DelegateInvokeMethod;
            if (dim != null)
            {
                foreach (var i in dim.Parameters)
                {
                    yield return i.Type.ToDisplayString(SymbolDisplayFormats.Namespace) + " " + i.Name;
                }
            }
        }

        IEnumerable<string> GetParameters()
        {
            var dim = typeSymbol.OriginalDefinition.DelegateInvokeMethod;
            if (dim != null)
            {
                foreach (var i in dim.Parameters)
                {
                    yield return i.Name;
                }
            }
        }

        public override IEnumerable<Diagnostic> GetErrors()
            => Enumerable.Empty<Diagnostic>();

        public override IEnumerable<Diagnostic> GetWarnings()
            => Enumerable.Empty<Diagnostic>();

        public override void DoGeneratePart_GetInstanceType(StringBuilder here)
        {
            var toAppend = typeSymbol.IsGenericType 
                ? $"if (gtd == typeof(global::{fullName}<{commaArguments}>)) return contextType;"
                : $"if (contextType == typeof(global::{fullName})) return contextType;";
            here.Append(toAppend);
        }

        public override void DoGeneratePart_GetDelegate(StringBuilder here)
        {
            var toAppend = typeSymbol.IsGenericType 
                ? $@"if (gtd == typeof(global::{fullName}<{commaArguments}>))
{{
                var dp = Activator.CreateInstance(typeof({@namespace}.{Prefix.MockClass}{typeSymbol.Name}<{commaArguments}>).MakeGenericType(contextType.GetGenericArguments()), new object[] {{ mockContext }})
                    ?? throw new InvalidOperationException(""can't create delegate for {fullName}"");
                return ((IDelegateProvider)dp).GetDelegate();
}}"
                : $@"if (contextType == typeof(global::{fullName}))
{{
    return new global::{@namespace}.{Prefix.MockClass}{typeSymbol.Name}((IInvocationContext<global::{fullName}>)mockContext).GetDelegate();
}}";
            here.Append(toAppend);
        }
    }
}
