using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.Text;

namespace LightMock.Generator
{
    [Generator]
    public class LightMockGenerator : ISourceGenerator
    {
        const string KGeneratedFileSuffix = ".spg.g.cs";
        const string KAttributeName = nameof(GenerateMockAttribute);
        const string KAttributeFile = KAttributeName + ".cs";

        readonly Lazy<string> attribute = new Lazy<string>(() => Utils.LoadResource(KAttributeFile));

        private static readonly SymbolDisplayFormat KNamespaceDisplayFormat = new SymbolDisplayFormat(
            typeQualificationStyle: SymbolDisplayTypeQualificationStyle.NameAndContainingTypesAndNamespaces
            );


        public LightMockGenerator()
        {
        }

        public void Execute(GeneratorExecutionContext context)
        {
            if (context.Compilation is CSharpCompilation compilation &&
                context.SyntaxReceiver is LightMockSyntaxReceiver receiver &&
                compilation.SyntaxTrees.First().Options is CSharpParseOptions options)
            {
                context.AddSource(KAttributeName, SourceText.From(attribute.Value, Encoding.UTF8));

                compilation = compilation
                    .AddSyntaxTrees(CSharpSyntaxTree.ParseText(SourceText.From(attribute.Value, Encoding.UTF8), options));

                var attributeSymbol = compilation.GetTypeByMetadataName(KAttributeName);
                if (attributeSymbol == null)
                {
                    context.ReportDiagnostic(Diagnostic.Create(
                        DiagnosticsDescriptors.KNoAttributeErrorDescriptor, Location.None, KAttributeName));
                    return;
                }

                foreach (var candidateClass in receiver.CandidateClasses)
                {
                    var model = compilation.GetSemanticModel(candidateClass.SyntaxTree);
                    var typeSymbol = model.GetDeclaredSymbol(candidateClass);
                    if (typeSymbol == null)
                        continue;
                    var relevantAttribute = typeSymbol.GetAttributes().FirstOrDefault(
                        a => attributeSymbol.Equals(a.AttributeClass, SymbolEqualityComparer.Default));
                    if (relevantAttribute == null)
                        continue;

                    var isPartial = candidateClass
                        .Modifiers
                        .Any(modifier => modifier.IsKind(SyntaxKind.PartialKeyword));
                    if (isPartial == false)
                    {
                        context.ReportDiagnostic(Diagnostic.Create(
                            DiagnosticsDescriptors.KNoPartialKeyworkErrorDescriptor,
                            Location.Create(candidateClass.SyntaxTree, new TextSpan()),
                            typeSymbol.Name));
                        continue;
                    }

                    var @interface = typeSymbol.Interfaces.FirstOrDefault();
                    if (@interface == null)
                    {
                        context.ReportDiagnostic(Diagnostic.Create(
                            DiagnosticsDescriptors.KNoInterfaceErrorDescriptor,
                            Location.Create(candidateClass.SyntaxTree, new TextSpan()),
                            typeSymbol.Name));
                        continue;
                    }

                    if (typeSymbol.Interfaces.Length > 1)
                    {
                        context.ReportDiagnostic(Diagnostic.Create(
                            DiagnosticsDescriptors.KTooManyInterfacesWarningDescriptor,
                            Location.Create(candidateClass.SyntaxTree, new TextSpan()),
                            typeSymbol.Name));
                    }

                    var className = typeSymbol.IsGenericType
                        ? typeSymbol.Name + "<" + string.Join(",", typeSymbol.TypeParameters.Select(i => i.Name)) + ">"
                        : typeSymbol.Name;
                    var fileName = typeSymbol.IsGenericType
                        ? typeSymbol.Name + "{" + string.Join(",", typeSymbol.TypeParameters.Select(i => i.Name)) + "}" + KGeneratedFileSuffix
                        : typeSymbol.Name + KGeneratedFileSuffix;
                    var interfaceName = @interface.Accept(new EnrichSymbolVisitor(compilation.Options.NullableContextOptions));
                    var nameSpace = typeSymbol.ContainingNamespace.ToDisplayString(KNamespaceDisplayFormat);
                    var members = @interface.GetMembers();
                    var code = $@"// <auto-generated />
using LightMock;

namespace {nameSpace}
{{
    partial class {className}
    {{
        private readonly IInvocationContext<{interfaceName}> context;

        public {typeSymbol.Name}(IInvocationContext<{interfaceName}> context)
        {{
            this.context = context;
        }}

        {string.Join("\r\n        ", EnrichMembers(compilation.Options.NullableContextOptions, members))}
    }}
}}
";
                    context.AddSource(fileName, SourceText.From(code, Encoding.UTF8));
                }
            }
        }

        IEnumerable<string> EnrichMembers(NullableContextOptions nullableContextOptions, IEnumerable<ISymbol> symbols)
            => symbols.Select(i => EnrichMember(nullableContextOptions, i));

        string EnrichMember(NullableContextOptions nullableContextOptions, ISymbol symbol)
            => symbol.Accept(new EnrichSymbolVisitor(nullableContextOptions));

        public void Initialize(GeneratorInitializationContext context)
        {
            context.RegisterForSyntaxNotifications(() => new LightMockSyntaxReceiver());
        }
    }
}
