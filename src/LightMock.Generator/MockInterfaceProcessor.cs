using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace LightMock.Generator
{
    sealed class MockInterfaceProcessor : ClassProcessor
    {
        const string KMockPrefix = "Mock_";
        private readonly SymbolVisitor<string> symbolVisitor;
        private readonly string className;
        private readonly string interfaceName;
        private readonly string nameSpace;

        public MockInterfaceProcessor(
            CSharpCompilation compilation,
            INamedTypeSymbol typeSymbol) : base(typeSymbol)
        {
            this.symbolVisitor = new InterfaceSymbolVisitor(compilation.Options.NullableContextOptions);

            var classNameBuilder = new StringBuilder(KMockPrefix)
                .Append(typeSymbol.Name);
            if (typeSymbol.IsGenericType)
            {
                classNameBuilder.Append("<")
                    .Append(string.Join(",", typeSymbol.TypeParameters.Select(i => i.Name)))
                    .Append(">");
            }
            className = classNameBuilder.ToString();
            interfaceName = typeSymbol.Accept(symbolVisitor);
            nameSpace = typeSymbol.ContainingNamespace.ToDisplayString(KNamespaceDisplayFormat);
        }

        public override IEnumerable<Diagnostic> GetErrors()
            => Enumerable.Empty<Diagnostic>();

        public override IEnumerable<Diagnostic> GetWarnings()
            => Enumerable.Empty<Diagnostic>();

        public override SourceText DoGenerate()
        {
            var constructorName = KMockPrefix + typeSymbol.Name;
            var members = typeSymbol.GetMembers();
            var code = $@"// <auto-generated />
using LightMock;

namespace {nameSpace}
{{
    partial class {className} : {interfaceName}
    {{
        private readonly IInvocationContext<{interfaceName}> {VariableNames.Context};

        public {constructorName}(IInvocationContext<{interfaceName}> {VariableNames.Context})
        {{
            this.{VariableNames.Context} = {VariableNames.Context};
        }}

        {string.Join("\r\n        ", members.Select(i => i.Accept(symbolVisitor)))}
    }}
}}
";
            return SourceText.From(code, Encoding.UTF8);
        }

        public override void DoGeneratePart_CreateMockInstance(StringBuilder here)
        {
            here.Append($"if (contextType == typeof({interfaceName})) return (T)(object)new {nameSpace}.{className}((MockContext<{interfaceName}>)(object)this); ");
        }

        public override string FileName => "Mock_" + base.FileName;
    }
}
