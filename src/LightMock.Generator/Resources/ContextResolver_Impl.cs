// <auto-generated />
using System;
using System.Linq.Expressions;

namespace LightMock.Generator
{
    public static partial class ContextResolver
    {
        public static Type GetInstanceType(Type contextType, IContextResolverDefaults defaults)
        {
            var gtd = contextType.IsGenericType ? contextType.GetGenericTypeDefinition() : null;

            /*getInstanceTypeBuilder*/

            throw new MockNotGeneratedException(contextType);
        }

        public static Type GetProtectedContextType(Type contextType, IContextResolverDefaults defaults)
        {
            var gtd = contextType.IsGenericType ? contextType.GetGenericTypeDefinition() : null;

            /*getProtectedContextTypeBuilder*/

            return defaults.DefaultProtectedContextType;
        }

        public static Type GetPropertiesContextType(Type contextType, IContextResolverDefaults defaults)
        {
            var gtd = contextType.IsGenericType ? contextType.GetGenericTypeDefinition() : null;

            /*getPropertiesContextTypeBuilder*/

            if (contextType.IsSubclassOf(defaults.MulticastDelegateType))
                return defaults.MulticastDelegateContextType;
            throw new MockNotGeneratedException(contextType);
        }

        public static Type GetAssertType(Type contextType, IContextResolverDefaults defaults)
        {
            var gtd = contextType.IsGenericType ? contextType.GetGenericTypeDefinition() : null;

            /*getAssertTypeBuilder*/

            throw new MockNotGeneratedException(contextType);
        }

        public static object GetDelegate(Type contextType, object mockContext, IContextResolverDefaults defaults)
        {
            var gtd = contextType.IsGenericType ? contextType.GetGenericTypeDefinition() : null;

            /*getDelegateBuilder*/

            throw new MockNotGeneratedException(contextType);
        }

        public static LambdaExpression ExchangeForExpression(string token, IContextResolverDefaults defaults)
        {
            switch (token)
            {
                /*exchangeForExpressionBuilder*/
                default:
                    throw new ArgumentException($"expression for provided token [{token}] is not found");
            }
        }
    }

}
