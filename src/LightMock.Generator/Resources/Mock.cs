// <auto-generated />
using System;
using System.Linq.Expressions;

namespace LightMock.Generator
{
    public sealed class Mock<T> : AbstractMock<T>
        where T : class
    {

        public Mock() { }

        public Mock(params object[] prms)
            : base(prms)
        { }

        protected override Type GetInstanceType(IContextResolverDefaults defaults)
            => ContextResolver.GetInstanceType(typeof(T), defaults);
        protected override Type GetProtectedContextType(IContextResolverDefaults defaults)
            => ContextResolver.GetProtectedContextType(typeof(T), defaults);
        protected override Type GetPropertiesContextType(IContextResolverDefaults defaults)
            => ContextResolver.GetPropertiesContextType(typeof(T), defaults);
        protected override Type GetAssertType(IContextResolverDefaults defaults)
            => ContextResolver.GetAssertType(typeof(T), defaults);
        protected override Type GetAssertIsAnyType(IContextResolverDefaults defaults)
            => ContextResolver.GetAssertIsAnyType(typeof(T), defaults);
        protected override T GetDelegate(Type type, IContextResolverDefaults defaults)
            => (T)ContextResolver.GetDelegate(type, PublicContext, defaults);
        protected override LambdaExpression ExchangeForExpression(string token, IContextResolverDefaults defaults)
            => ContextResolver.ExchangeForExpression(token, defaults);
    }
}
