using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace LightMock.Generator
{
    sealed class InterfaceProcessor : ClassProcessor
    {
        private readonly ClassDeclarationSyntax candidateClass;
        private readonly INamedTypeSymbol? @interface;
        private readonly SymbolVisitor<string> symbolVisitor;

        public InterfaceProcessor(
            CSharpCompilation compilation,
            ClassDeclarationSyntax candidateClass,
            INamedTypeSymbol typeSymbol,
            INamedTypeSymbol? @interface) : base (typeSymbol)
        {
            this.candidateClass = candidateClass;
            this.@interface = @interface;
            this.symbolVisitor = new InterfaceSymbolVisitor(compilation.Options.NullableContextOptions);
        }

        public override IEnumerable<Diagnostic> GetErrors()
        {
            if (@interface == null)
            {
                yield return Diagnostic.Create(
                    DiagnosticsDescriptors.KNoInterfaceErrorDescriptor,
                    Location.Create(candidateClass.SyntaxTree, new TextSpan()),
                    typeSymbol.Name);
            }
        }

        public override IEnumerable<Diagnostic> GetWarnings()
        {
            if (typeSymbol.Interfaces.Length > 1)
            {
                yield return Diagnostic.Create(
                    DiagnosticsDescriptors.KTooManyInterfacesWarningDescriptor,
                    Location.Create(candidateClass.SyntaxTree, new TextSpan()),
                    typeSymbol.Name);
            }
        }

        public override SourceText DoGenerate()
        {
            if (@interface == null)
                throw new InvalidOperationException("Call ");
            var className = typeSymbol.Name;
            if (typeSymbol.IsGenericType)
                className += "<" + string.Join(",", typeSymbol.TypeParameters.Select(i => i.Name)) + ">";
            var interfaceName = @interface.Accept(symbolVisitor);
            var nameSpace = typeSymbol.ContainingNamespace.ToDisplayString(SymbolDisplayFormats.Namespace);
            var members = @interface.AllInterfaces.SelectMany(i => i.GetMembers()).Concat(@interface.GetMembers());
            var code = $@"// <auto-generated />
using LightMock;

namespace {nameSpace}
{{
    partial class {className}
    {{
        private readonly IInvocationContext<{interfaceName}> {VariableNames.Context};

        public {typeSymbol.Name}(IInvocationContext<{interfaceName}> {VariableNames.Context})
        {{
            this.{VariableNames.Context} = {VariableNames.Context};
        }}

        {string.Join("\r\n        ",  members.Select(i => i.Accept(symbolVisitor)))}
    }}
}}
";
            return SourceText.From(code, Encoding.UTF8);
        }
    }
}
