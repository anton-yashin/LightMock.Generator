using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace LightMock.Generator
{
    sealed class InterfaceProcessor : ClassProcessor
    {
        private readonly CSharpCompilation compilation;
        private readonly ClassDeclarationSyntax candidateClass;
        private readonly INamedTypeSymbol? @interface;

        public InterfaceProcessor(
            CSharpCompilation compilation,
            ClassDeclarationSyntax candidateClass,
            INamedTypeSymbol typeSymbol,
            INamedTypeSymbol? @interface) : base (typeSymbol)
        {
            this.compilation = compilation;
            this.candidateClass = candidateClass;
            this.@interface = @interface;
        }

        public override IEnumerable<Diagnostic> GetErrors()
        {
            if (@interface == null)
            {
                yield return Diagnostic.Create(
                    DiagnosticsDescriptors.KNoInterfaceErrorDescriptor,
                    Location.Create(candidateClass.SyntaxTree, new TextSpan()),
                    typeSymbol.Name);
            }
        }

        public override IEnumerable<Diagnostic> GetWarnings()
        {
            if (typeSymbol.Interfaces.Length > 1)
            {
                yield return Diagnostic.Create(
                    DiagnosticsDescriptors.KTooManyInterfacesWarningDescriptor,
                    Location.Create(candidateClass.SyntaxTree, new TextSpan()),
                    typeSymbol.Name);
            }
        }

        public override SourceText DoGenerate()
        {
            if (@interface == null)
                throw new InvalidOperationException("Call ");
            var className = typeSymbol.IsGenericType
                ? typeSymbol.Name + "<" + string.Join(",", typeSymbol.TypeParameters.Select(i => i.Name)) + ">"
                : typeSymbol.Name;
            var interfaceName = @interface.Accept(new InterfaceSymbolVisitor(compilation.Options.NullableContextOptions));
            var nameSpace = typeSymbol.ContainingNamespace.ToDisplayString(KNamespaceDisplayFormat);
            var members = @interface.GetMembers();
            var code = $@"// <auto-generated />
using LightMock;

namespace {nameSpace}
{{
    partial class {className}
    {{
        private readonly IInvocationContext<{interfaceName}> context;

        public {typeSymbol.Name}(IInvocationContext<{interfaceName}> context)
        {{
            this.context = context;
        }}

        {string.Join("\r\n        ", EnrichMembers(compilation.Options.NullableContextOptions, members))}
    }}
}}
";
            return SourceText.From(code, Encoding.UTF8);
        }

        IEnumerable<string> EnrichMembers(NullableContextOptions nullableContextOptions, IEnumerable<ISymbol> symbols)
            => symbols.Select(i => EnrichMember(nullableContextOptions, i));

        string EnrichMember(NullableContextOptions nullableContextOptions, ISymbol symbol)
            => symbol.Accept(new InterfaceSymbolVisitor(nullableContextOptions));
    }
}
